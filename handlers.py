import json
import textwrap
from typing import Any, Dict, List, Optional
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from loguru import logger

from controler import Controller


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–∏–π
def russian_level(record):
    levels = {
        "TRACE": "–¢–†–ï–ô–°",
        "DEBUG": "–û–¢–õ–ê–î–ö–ê",
        "INFO": "–ò–ù–§–û",
        "SUCCESS": "–£–°–ü–ï–•",
        "WARNING": "–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï",
        "ERROR": "–û–®–ò–ë–ö–ê",
        "CRITICAL": "–ö–†–ò–¢–ò–ß–ù–û",
    }
    record["level"].name = levels.get(record["level"].name, record["level"].name)
    return record


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ loguru –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª —Å —Ä—É—Å—Å–∫–∏–º–∏ —É—Ä–æ–≤–Ω—è–º–∏
logger.remove()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
logger.add(
    sink=lambda msg: print(msg, end=""),
    format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level: <12}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>",
    level="DEBUG",
    colorize=True,
    filter=russian_level,
)

# –í—ã–≤–æ–¥ –≤ —Ñ–∞–π–ª (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞ ‚Äî –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞)
logger.add(
    "bot.log",
    rotation="10 MB",
    retention="10 days",
    level="DEBUG",
    format="{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {name}:{function}:{line} - {message}"
)

bot_router = Router()
controller = Controller()


def _truncate(value: Optional[Any], length: int) -> str:
    if value is None:
        return ""
    s = str(value)
    return s if len(s) <= length else s[: max(0, length - 1)] + "‚Ä¶"


def get_main_keyboard() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –¢–∞–±–ª–∏—Ü–∞", callback_data="action:show_table"),
            InlineKeyboardButton(text="‚ûï –ù–æ–≤–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data="action:new_entry"),
        ],
        [InlineKeyboardButton(text="üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="action:instructions")]
    ])
    return keyboard


def _format_records_table(records: List[Dict[str, Any]]) -> str:
    if not records:
        # Very short sample row to show expected fields (concise)
        return "BSSID | SSID | RSSI | FREQ | TIMESTAMP\n00:11:22:33:44:55 | MyWiFi | -50 | 2412 | 1698115200"
    lines = ["BSSID | SSID | RSSI | FREQ | TIMESTAMP"]
    for r in records:
        lines.append(
            f"{_truncate(r.get('bssid'),17)} | {_truncate(r.get('ssid'),20)} | {_truncate(r.get('rssi'),4)} | {_truncate(r.get('frequency'),5)} | {_truncate(r.get('timestamp'),10)}"
        )
    return "\n".join(lines)


@bot_router.message(Command(commands=["start"]))
async def cmd_start(message: types.Message) -> None:
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–±–æ—Ä–∞ WiFi-–¥–∞–Ω–Ω—ã—Ö. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=get_main_keyboard(),
    )


@bot_router.callback_query(F.data == "action:show_table")
async def show_table(callback: types.CallbackQuery) -> None:
    logger.debug("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã")
    try:
        records = controller.get_all_networks()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(records)} –∑–∞–ø–∏—Å–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        text = _format_records_table(records)
        await callback.message.answer(f"üìä –¢–∞–±–ª–∏—Ü–∞ –∑–∞–ø–∏—Å–µ–π:\n{text}")
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {}", e)
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã")
    await callback.answer()


@bot_router.callback_query(F.data == "action:instructions")
async def show_instructions(callback: types.CallbackQuery) -> None:
    logger.debug("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
    instructions = textwrap.dedent(
        """
        üìö *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é WiFi Data Bot*

        –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ WiFi —Å–µ—Ç—è—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.

        –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
        - –¢–∞–±–ª–∏—Ü–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏
        - –ù–æ–≤–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ JSON –∫–∞–∫ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª–æ–º .json

        –ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏ (JSON):
        {
            "bssid": "00:11:22:33:44:55",
            "frequency": 2412,
            "rssi": -50,
            "ssid": "MyWiFi",
            "timestamp": 1698115200,
            "channel_bandwidth": "20",
            "capabilities": "WPA2-PSK"
        }
        """
    ).strip()

    await callback.message.answer(
        instructions,
        parse_mode="Markdown",
        reply_markup=get_main_keyboard()
    )
    await callback.message.answer(instructions, parse_mode="Markdown")
    await callback.answer()


@bot_router.callback_query(F.data == "action:new_entry")
async def new_entry_prompt(callback: types.CallbackQuery) -> None:
    logger.debug("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–æ–≤–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ")
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ JSON (–∫–∞–∫ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª .json) —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–µ—Ç–∏.")
    await callback.answer()


@bot_router.message()
async def handle_text_or_file(message: types.Message) -> None:
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    payload: Optional[bytes] = None
    if message.document and message.document.file_name.lower().endswith('.json'):
        logger.debug("–ü–æ–ª—É—á–µ–Ω JSON-—Ñ–∞–π–ª: {}", message.document.file_name)
        file = await message.bot.download(message.document)
        payload = file.read()
    elif message.text:
        logger.debug("–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        payload = message.text.encode('utf-8')
    else:
        logger.warning("–ü–æ–ª—É—á–µ–Ω –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è")
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ JSON —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ .json —Ñ–∞–π–ª.")
        return

    try:
        data = controller.parse_json(payload)
        logger.debug("JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ–±—Ä–∞–Ω")
    except ValueError as e:
        logger.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {}", e)
        await message.answer(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        return

    if isinstance(data, list):
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –∏–∑ {len(data)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        ok_count = 0
        for i, item in enumerate(data):
            try:
                nw = controller.build_network(item)
                if controller.save_network(nw):
                    ok_count += 1
                    logger.debug(f"–≠–ª–µ–º–µ–Ω—Ç {i+1} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
                else:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç {i+1}")
            except Exception as e:
                logger.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ {}: {}", i+1, e)
        
        logger.info(f"–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {ok_count}/{len(data)} –∑–∞–ø–∏—Å–µ–π")
        await message.answer(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {ok_count}/{len(data)} –∑–∞–ø–∏—Å–µ–π.")
        await message.answer("–ì–æ—Ç–æ–≤–æ!", reply_markup=get_main_keyboard())
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–π –∑–∞–ø–∏—Å–∏
    logger.debug("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–π –∑–∞–ø–∏—Å–∏")
    try:
        nw = controller.build_network(data)
        if controller.save_network(nw):
            logger.info("–û–¥–∏–Ω–æ—á–Ω–∞—è –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=get_main_keyboard())
        else:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–¥–∏–Ω–æ—á–Ω—É—é –∑–∞–ø–∏—Å—å")
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å (–≤–æ–∑–º–æ–∂–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç BSSID –∏–ª–∏ –æ—à–∏–±–æ—á–Ω—ã–µ –ø–æ–ª—è).")
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–¥–∏–Ω–æ—á–Ω–æ–π –∑–∞–ø–∏—Å–∏: {}", e)
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø–∏—Å–∏: {e}")
    await callback.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
