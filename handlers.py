import json
import textwrap
from typing import Any, Dict, List, Optional
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from loguru import logger

from controler import Controller


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–∏–π
def russian_level(record):
    levels = {
        "TRACE": "–¢–†–ï–ô–°",
        "DEBUG": "–û–¢–õ–ê–î–ö–ê",
        "INFO": "–ò–ù–§–û",
        "SUCCESS": "–£–°–ü–ï–•",
        "WARNING": "–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï",
        "ERROR": "–û–®–ò–ë–ö–ê",
        "CRITICAL": "–ö–†–ò–¢–ò–ß–ù–û",
    }
    record["level"].name = levels.get(record["level"].name, record["level"].name)
    return record


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ loguru
logger.remove()
logger.add(
    sink=lambda msg: print(msg, end=""),
    format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level: <12}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>",
    level="DEBUG",
    colorize=True,
    filter=russian_level,
)
logger.add(
    "bot.log",
    rotation="10 MB",
    retention="10 days",
    level="DEBUG",
    format="{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {name}:{function}:{line} - {message}"
)

bot_router = Router()
controller = Controller()


class Form(StatesGroup):
    waiting_for_pavilion = State()
    waiting_for_password = State()


def _truncate(value: Optional[Any], length: int) -> str:
    if value is None:
        return ""
    s = str(value)
    return s if len(s) <= length else s[: max(0, length - 1)] + "‚Ä¶"


def get_main_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –¢–∞–±–ª–∏—Ü–∞", callback_data="action:show_table"),
            InlineKeyboardButton(text="‚ûï –ù–æ–≤–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data="action:new_entry"),
        ],
        [InlineKeyboardButton(text="üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="action:instructions")]
    ])


def _format_records_table(records: List[Dict[str, Any]]) -> str:
    if not records:
        return "BSSID | SSID | RSSI | FREQ | TIMESTAMP\n00:11:22:33:44:55 | MyWiFi | -50 | 2412 | 1698115200"

    lines = ["BSSID | SSID | RSSI | FREQ | TIMESTAMP"]
    for r in records:
        lines.append(
            f"{_truncate(r.get('bssid'),17)} | {_truncate(r.get('ssid'),20)} | {_truncate(r.get('rssi'),4)} | {_truncate(r.get('frequency'),5)} | {_truncate(r.get('timestamp'),10)}"
        )
    return "\n".join(lines)


def _validate_wifi_data(data: Dict[str, Any]) -> tuple[bool, str]:
    required_fields = ['bssid', 'frequency', 'rssi', 'ssid', 'timestamp']
    for field in required_fields:
        if field not in data:
            return False, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}"

    if not isinstance(data['bssid'], str) or len(data['bssid']) == 0:
        return False, "BSSID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π"

    if not isinstance(data['ssid'], str):
        return False, "SSID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π"

    if not isinstance(data['frequency'], (int, float)) or data['frequency'] <= 0:
        return False, "Frequency –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º"

    if not isinstance(data['rssi'], int) or data['rssi'] > 0:
        return False, "RSSI –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º"

    if not isinstance(data['timestamp'], (int, float)) or data['timestamp'] <= 0:
        return False, "Timestamp –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º"

    return True, ""


def _prepare_wifi_data(data: Dict[str, Any]) -> Dict[str, Any]:
    prepared_data = data.copy()
    for key in prepared_data:
        if prepared_data[key] is None:
            if key in ['frequency', 'rssi', 'timestamp']:
                prepared_data[key] = 0
            elif key in ['ssid', 'bssid', 'channel_bandwidth', 'capabilities']:
                prepared_data[key] = ""
        elif prepared_data[key] == "":
            if key in ['bssid']:
                prepared_data[key] = "00:00:00:00:00:00"

    required_fields = ['bssid', 'frequency', 'rssi', 'ssid', 'timestamp', 'channel_bandwidth', 'capabilities']
    for field in required_fields:
        if field not in prepared_data:
            if field in ['frequency', 'rssi', 'timestamp']:
                prepared_data[field] = 0
            else:
                prepared_data[field] = ""

    return prepared_data


async def _process_single_wifi_record(data: Dict[str, Any], message: types.Message, state: FSMContext) -> Optional[str]:
    prepared_data = _prepare_wifi_data(data)
    is_valid, error_msg = _validate_wifi_data(prepared_data)
    if not is_valid:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {error_msg}", reply_markup=get_main_keyboard())
        return None

    # –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å (–≤–Ω–µ —Ñ—É–Ω–∫—Ü–∏–∏)
    error_messages_sent = {}

    # –í —Ñ—É–Ω–∫—Ü–∏–∏:
    chat_id = message.chat.id

    is_valid = _validate_wifi_data(prepared_data)
    if not is_valid:
        if chat_id not in error_messages_sent or not error_messages_sent[chat_id]:
            error_messages_sent[chat_id] = True
        return False
    else:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        error_messages_sent[chat_id] = False

    try:
        network = controller.build_network(prepared_data)
        bssid = controller.save_network(network)
        if bssid:
            return bssid
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ë–î.", reply_markup=get_main_keyboard())
            return None
    except Exception as e:
        logger.exception("Error processing WiFi record")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}", reply_markup=get_main_keyboard())
        return None
            return False

    except Exception as e:
        logger.exception("Error processing WiFi record")
        return False


async def _process_multiple_wifi_records(records: List[Dict[str, Any]], message: types.Message) -> None:
    if not records:
        await message.answer("‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.", reply_markup=get_main_keyboard())
        return

    total_count = len(records)
    success_count = 0
    error_count = 0

    await message.answer(f"üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É {total_count} –∑–∞–ø–∏—Å–µ–π...")

    for i, record in enumerate(records, 1):
        if not isinstance(record, dict):
            error_count += 1
            logger.warning(f"–ó–∞–ø–∏—Å—å #{i} –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {type(record)}")
            continue

        try:
            bssid = await _process_single_wifi_record(record, message, FSMContext(state=None))
            if bssid:
                success_count += 1
            else:
                error_count += 1
        except Exception:
            error_count += 1
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø–∏—Å–∏ #{i}")

    result_message = (
        f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {success_count}/{total_count}\n"
        f"‚Ä¢ –û—à–∏–±–∫–∏: {error_count}/{total_count}"
    )
    await message.answer(result_message, reply_markup=get_main_keyboard())


async def _process_json_file_content(content: str, message: types.Message, state: FSMContext) -> None:
    try:
        parsed_data = json.loads(content)
    except json.JSONDecodeError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}", reply_markup=get_main_keyboard())
        return

    if isinstance(parsed_data, list):
        await _process_multiple_wifi_records(parsed_data, message)
    elif isinstance(parsed_data, dict):
        bssid = await _process_single_wifi_record(parsed_data, message, state)
        if bssid:
            await state.update_data(bssid=bssid)
            await message.answer("üè¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞–≤–∏–ª—å–æ–Ω–∞:")
            await state.set_state(Form.waiting_for_pavilion)
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: –æ–¥–∏–Ω–æ—á–Ω–∞—è –∑–∞–ø–∏—Å—å –∏–ª–∏ –º–∞—Å—Å–∏–≤ –∑–∞–ø–∏—Å–µ–π
    # If the parsed JSON matches the example sentinel values, inform user it's only an example
    def _is_example_payload(obj) -> bool:
        """Detect the example payload shown in the bot instructions.

        We consider it an example when BSSID equals the common placeholder
        '00:11:22:33:44:55' or when timestamp/frequency/rssi match the short example.
        """
        if not isinstance(obj, dict):
            return False
        bssid = obj.get('bssid', '')
        if isinstance(bssid, str) and bssid.strip() == '00:11:22:33:44:55':
            return True
        # other loose checks
        if obj.get('ssid') == 'MyWiFi':
            return True
        return False

    if isinstance(parsed_data, list):
        # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        # If any entry looks like the example, notify the user instead of processing
        if any(_is_example_payload(item) for item in parsed_data if isinstance(item, dict)):
            await message.answer(
                "‚ö†Ô∏è –ü–æ—Ö–æ–∂–µ, –≤—ã –ø—Ä–∏—Å–ª–∞–ª–∏ –ø—Ä–∏–º–µ—Ä –∏–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –∞ –Ω–µ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏.",
                reply_markup=get_main_keyboard(),
            )
            return

        await _process_multiple_wifi_records(parsed_data, message)
    elif isinstance(parsed_data, dict):
        # –û–¥–∏–Ω–æ—á–Ω–∞—è –∑–∞–ø–∏—Å—å
        if _is_example_payload(parsed_data):
            await message.answer(
                "‚ö†Ô∏è –ü–æ—Ö–æ–∂–µ, –≤—ã –ø—Ä–∏—Å–ª–∞–ª–∏ –ø—Ä–∏–º–µ—Ä –∏–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –∞ –Ω–µ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏.",
                reply_markup=get_main_keyboard(),
            )
            return

        success = await _process_single_wifi_record(parsed_data, message)
        if success:
            await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É!", reply_markup=get_main_keyboard())
    else:
        await message.answer("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç JSON. –û–∂–∏–¥–∞–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç –∏–ª–∏ –º–∞—Å—Å–∏–≤.", reply_markup=get_main_keyboard())


@bot_router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    welcome_text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WiFi Data Bot! üåê\n"
        "–Ø –ø–æ–º–æ–≥–∞—é —Å–æ–±–∏—Ä–∞—Ç—å –∏ —Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ WiFi-—Å–µ—Ç—è—Ö.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–º –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ, —Ç–∞–∫ –∏ JSON-—Ñ–∞–π–ª–∞–º–∏.\n\n"
        "üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
        "‚Ä¢ –û–¥–∏–Ω–æ—á–Ω–∞—è –∑–∞–ø–∏—Å—å: JSON-–æ–±—ä–µ–∫—Ç\n"
        "‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏: JSON-–º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º:"
    )
    await message.answer(welcome_text, reply_markup=get_main_keyboard())


@bot_router.callback_query(F.data == "action:show_table")
async def show_table(callback: types.CallbackQuery) -> None:
    try:
        records = controller.get_all_networks()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(records)} –∑–∞–ø–∏—Å–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    except Exception as exc:
        logger.exception("Failed to read records from DB")
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {exc}")
        await callback.answer()
        return

    if not records:
        await callback.message.answer("–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ '‚ûï –ù–æ–≤–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ'.")
        await callback.answer()
        return

    table_text = _format_records_table(records)
    if len(table_text) > 4000:
        parts = [table_text[i:i+4000] for i in range(0, len(table_text), 4000)]
        for part in parts:
            await callback.message.answer(f"```\n{part}\n```", parse_mode="Markdown")
    else:
        await callback.message.answer(f"```\n{table_text}\n```", parse_mode="Markdown", reply_markup=get_main_keyboard())
    await callback.answer()


@bot_router.callback_query(F.data == "action:new_entry")
async def new_entry_prompt(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    example_single = textwrap.dedent('''
        üìã *–û–¥–∏–Ω–æ—á–Ω–∞—è –∑–∞–ø–∏—Å—å:*
        ```json
        {
            "bssid": "00:11:22:33:44:55",
            "frequency": 2412,
            "rssi": -50,
            "ssid": "MyWiFi",
            "timestamp": 1698115200,
            "channel_bandwidth": "20",
            "capabilities": "WPA2-PSK"
        }
        ```
    ''')
    example_multiple = textwrap.dedent('''
        üìã *–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ (–º–∞—Å—Å–∏–≤):*
        ```json
        [
            {
                "bssid": "00:11:22:33:44:55",
                "frequency": 2412,
                "rssi": -50,
                "ssid": "MyWiFi",
                "timestamp": 1698115200
            }
        ]
        ```
    ''')

    instruction_text = (
        "üìù –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ WiFi-—Å–µ—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ JSON-—Ñ–∞–π–ª.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:\n"
        "‚Ä¢ **–û–¥–∏–Ω–æ—á–Ω—É—é –∑–∞–ø–∏—Å—å** - –æ–¥–∏–Ω JSON-–æ–±—ä–µ–∫—Ç\n"
        "‚Ä¢ **–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏** - JSON-–º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤\n\n"
    )

    await callback.message.answer(instruction_text, parse_mode="Markdown")
    await callback.message.answer(example_single, parse_mode="Markdown")
    await callback.message.answer("... –∏–ª–∏ ...", parse_mode="Markdown")
    await callback.message.answer(example_multiple, parse_mode="Markdown")
    await callback.answer()


@bot_router.message(F.document)
async def handle_json_file(message: types.Message, state: FSMContext) -> None:
    if not message.document or not message.document.file_name.lower().endswith('.json'):
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.", reply_markup=get_main_keyboard())
        return

    try:
        file = await message.bot.get_file(message.document.file_id)
        file_content = await message.bot.download_file(file.file_path)
        content_text = file_content.read().decode('utf-8')
        await message.answer("üì• –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω, –Ω–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
        await _process_json_file_content(content_text, message, state)
    except Exception as e:
        logger.exception("Error processing JSON file")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}", reply_markup=get_main_keyboard())


@bot_router.message()
async def handle_text_or_file(message: types.Message, state: FSMContext) -> None:
    payload_text = message.text or ""
    try:
        parsed_data = json.loads(payload_text)
    except json.JSONDecodeError as e:
        await message.answer(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON: {e}", reply_markup=get_main_keyboard())
        return

    if isinstance(parsed_data, list):
        await _process_multiple_wifi_records(parsed_data, message)
    elif isinstance(parsed_data, dict):
        bssid = await _process_single_wifi_record(parsed_data, message, state)
        if bssid:
            await state.update_data(bssid=bssid)
            await message.answer("üè¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞–≤–∏–ª—å–æ–Ω–∞:")
            await state.set_state(Form.waiting_for_pavilion)
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: –æ–¥–∏–Ω–æ—á–Ω–∞—è –∑–∞–ø–∏—Å—å –∏–ª–∏ –º–∞—Å—Å–∏–≤ –∑–∞–ø–∏—Å–µ–π
    def _is_example_payload(obj) -> bool:
        if not isinstance(obj, dict):
            return False
        bssid = obj.get('bssid', '')
        if isinstance(bssid, str) and bssid.strip() == '00:11:22:33:44:55':
            return True
        if obj.get('ssid') == 'MyWiFi':
            return True
        return False

    if isinstance(parsed_data, list):
        # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        if any(_is_example_payload(item) for item in parsed_data if isinstance(item, dict)):
            await message.answer(
                "‚ö†Ô∏è –ü–æ—Ö–æ–∂–µ, –≤—ã –ø—Ä–∏—Å–ª–∞–ª–∏ –ø—Ä–∏–º–µ—Ä –∏–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –∞ –Ω–µ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏.",
                reply_markup=get_main_keyboard(),
            )
            return

        await _process_multiple_wifi_records(parsed_data, message)
    elif isinstance(parsed_data, dict):
        # –û–¥–∏–Ω–æ—á–Ω–∞—è –∑–∞–ø–∏—Å—å
        if _is_example_payload(parsed_data):
            await message.answer(
                "‚ö†Ô∏è –ü–æ—Ö–æ–∂–µ, –≤—ã –ø—Ä–∏—Å–ª–∞–ª–∏ –ø—Ä–∏–º–µ—Ä –∏–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –∞ –Ω–µ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏.",
                reply_markup=get_main_keyboard(),
            )
            return

        success = await _process_single_wifi_record(parsed_data, message)
        if success:
            await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É!", reply_markup=get_main_keyboard())
    else:
        await message.answer("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç JSON. –û–∂–∏–¥–∞–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç –∏–ª–∏ –º–∞—Å—Å–∏–≤.", reply_markup=get_main_keyboard())


@bot_router.message(Form.waiting_for_pavilion)
async def process_pavilion(message: types.Message, state: FSMContext):
    try:
        pavilion = int(message.text.strip())
        if pavilion <= 0:
            raise ValueError
        await state.update_data(pavilion=pavilion)
        await message.answer("üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç Wi-Fi —Å–µ—Ç–∏:")
        await state.set_state(Form.waiting_for_password)
    except ValueError:
        await message.answer("‚ùå –ù–æ–º–µ—Ä –ø–∞–≤–∏–ª—å–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return


@bot_router.message(Form.waiting_for_password)
async def process_password(message: types.Message, state: FSMContext):
    password = message.text.strip()
    data = await state.get_data()
    bssid = data.get("bssid")
    pavilion = data.get("pavilion")

    success = controller.update_network(bssid, password=password, pavilion_number=pavilion)
    if success:
        await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", reply_markup=get_main_keyboard())
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.", reply_markup=get_main_keyboard())

    await state.clear()


@bot_router.callback_query(F.data == "action:instructions")
async def show_instructions(callback: types.CallbackQuery) -> None:
    instructions = textwrap.dedent(
        """
        üìö *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é WiFi Data Bot*

        –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Å–±–æ—Ä–∞ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ WiFi-—Å–µ—Ç—è—Ö.

        *–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞:*
        - *–¢–∞–±–ª–∏—Ü–∞*: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ WiFi-—Å–µ—Ç—è—Ö
        - *–ù–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ*: –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ WiFi-—Å–µ—Ç–∏
        - *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è*: –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

        *–°–ø–æ—Å–æ–±—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:*
        1. *–¢–µ–∫—Å—Ç–æ–≤—ã–π JSON*: –û—Ç–ø—Ä–∞–≤—å—Ç–µ JSON-—Å—Ç—Ä–æ–∫—É –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        2. *JSON-—Ñ–∞–π–ª*: –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .json

        –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç –∑–∞–ø—Ä–æ—Å–∏—Ç:
        - –ù–æ–º–µ—Ä –ø–∞–≤–∏–ª—å–æ–Ω–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)
        - –ü–∞—Ä–æ–ª—å –æ—Ç Wi-Fi

        –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É.
        """
    ).strip()

    await callback.message.answer(instructions, parse_mode="Markdown", reply_markup=get_main_keyboard())
    await callback.answer()
