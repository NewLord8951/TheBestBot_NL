import logging
import json
import textwrap
from typing import Any, Dict, List
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from controler import Controller  # –ò–º–ø–æ—Ä—Ç –≤–∞—à–µ–≥–æ Controller


# –õ–æ–≥–≥–µ—Ä –¥–ª—è –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞—ë–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä
bot_router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Controller
controller = Controller()


def _truncate(value: str, length: int) -> str:
    """–ö–æ—Ä–æ—Ç–∫–∞—è –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É—Å–µ—á–µ–Ω–∏—è —Å—Ç—Ä–æ–∫."""
    if value is None:
        return ""
    s = str(value)
    return s if len(s) <= length else s[: max(0, length - 1)] + "‚Ä¶"


def get_main_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –æ—Å–Ω–æ–≤–Ω—É—é inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±–æ—Ç–∞."""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–¢–∞–±–ª–∏—Ü–∞", callback_data="show_table"),
            InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data="new_entry"),
        ],
        [InlineKeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="instructions")]
    ])
    return keyboard


def _format_records_table(records: List[Dict[str, Any]]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–µ–∫—Å—Ç–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É.

    –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å–∏ - —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏: ssid, bssid, frequency, rssi,
    channel_bandwidth, timestamp, capabilities.
    """
    header = (
        "üìä –¢–∞–±–ª–∏—Ü–∞ WiFi-—Å–µ—Ç–µ–π:\n\n"
        f"{'SSID':<20} {'BSSID':<18} {'–ß–∞—Å—Ç–æ—Ç–∞':<10} {'RSSI':<8} {'–ö–∞–Ω–∞–ª':<10} {'–í—Ä–µ–º—è':<15} {'–ö–∞–ø–∞–±–∏–ª–∏—Ç–∏':<20}\n"
    )
    lines = [header, "-" * 100 + "\n"]

    for rec in records:
        ssid = _truncate(rec.get("ssid", ""), 19)
        bssid = _truncate(rec.get("bssid", ""), 17)
        frequency = _truncate(rec.get("frequency", ""), 10)
        rssi = _truncate(rec.get("rssi", ""), 8)
        channel = _truncate(rec.get("channel_bandwidth", ""), 10)
        timestamp = _truncate(rec.get("timestamp", ""), 15)
        capabilities = _truncate(rec.get("capabilities", ""), 19)

        lines.append(
            f"{ssid:<20} {bssid:<18} {frequency:<10} {rssi:<8} {channel:<10} {timestamp:<15} {capabilities:<20}\n"
        )

    return "".join(lines)


def _validate_wifi_data(data: Dict[str, Any]) -> tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö WiFi-—Å–µ—Ç–∏.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (is_valid, error_message)
    """
    required_fields = ['bssid', 'frequency', 'rssi', 'ssid', 'timestamp']

    for field in required_fields:
        if field not in data:
            return False, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö —Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω—ã—Ö None –∑–Ω–∞—á–µ–Ω–∏–π
    if data.get('bssid') is not None:
        if not isinstance(data['bssid'], str) or len(data['bssid']) == 0:
            return False, "BSSID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π"

    if data.get('ssid') is not None and not isinstance(data['ssid'], str):
        return False, "SSID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π"

    if data.get('frequency') is not None:
        if not isinstance(data['frequency'], (int, float)) or data['frequency'] <= 0:
            return False, "Frequency –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º"

    if data.get('rssi') is not None:
        if not isinstance(data['rssi'], int) or data['rssi'] > 0:
            return False, "RSSI –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º"

    if data.get('timestamp') is not None:
        if not isinstance(data['timestamp'], (int, float)) or data['timestamp'] <= 0:
            return False, "Timestamp –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º"

    return True, ""


def _prepare_wifi_data(data: Dict[str, Any]) -> Dict[str, Any]:
    """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ WiFi-—Å–µ—Ç–∏, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è."""
    prepared_data = data.copy()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç—ã—Ö –∏–ª–∏ None –∑–Ω–∞—á–µ–Ω–∏–π
    for key in prepared_data:
        if prepared_data[key] is None:
            # –î–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if key in ['frequency', 'rssi', 'timestamp']:
                prepared_data[key] = 0
            elif key in ['ssid', 'bssid', 'channel_bandwidth', 'capabilities']:
                prepared_data[key] = ""
        elif prepared_data[key] == "":
            # –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if key in ['bssid']:
                # BSSID –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π, —ç—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
                prepared_data[key] = "00:00:00:00:00:00"
    
    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    required_fields = ['bssid', 'frequency', 'rssi', 'ssid', 'timestamp', 'channel_bandwidth', 'capabilities']
    for field in required_fields:
        if field not in prepared_data:
            if field in ['frequency', 'rssi', 'timestamp']:
                prepared_data[field] = 0
            else:
                prepared_data[field] = ""
    
    return prepared_data


async def _process_single_wifi_record(data: Dict[str, Any], message: types.Message) -> bool:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É –∑–∞–ø–∏—Å—å WiFi-–¥–∞–Ω–Ω—ã—Ö.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, False –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.
    """
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
    prepared_data = _prepare_wifi_data(data)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
    is_valid, error_msg = _validate_wifi_data(prepared_data)
    if not is_valid:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {error_msg}", reply_markup=get_main_keyboard())
        return False

    try:
        # –ü—Ä–æ–±—É–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
        network = controller.build_network(prepared_data)
        saved = controller.save_network(network)

        if saved:
            return True
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ë–î.", reply_markup=get_main_keyboard())
            return False

    except Exception as e:
        logger.exception("Error processing WiFi record")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}", reply_markup=get_main_keyboard())
        return False


async def _process_json_file_content(content: str, message: types.Message) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ JSON-—Ñ–∞–π–ª–∞."""
    try:
        parsed_data = json.loads(content)
    except json.JSONDecodeError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}", reply_markup=get_main_keyboard())
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: –æ–¥–∏–Ω–æ—á–Ω–∞—è –∑–∞–ø–∏—Å—å –∏–ª–∏ –º–∞—Å—Å–∏–≤ –∑–∞–ø–∏—Å–µ–π
    if isinstance(parsed_data, list):
        # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ data_processor
        try:
            if hasattr(controller, 'data_processor') and controller.data_processor:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ data_processor
                processed_records = []
                for record in parsed_data:
                    if isinstance(record, dict):
                        processed_records.append(_prepare_wifi_data(record))
                    else:
                        processed_records.append(record)
                
                controller.data_processor.process_multiple_records(processed_records)
                await message.answer(
                    f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª —Å {len(parsed_data)} –∑–∞–ø–∏—Å—è–º–∏. –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ data_processor.",
                    reply_markup=get_main_keyboard()
                )
            else:
                # –ï—Å–ª–∏ data_processor –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
                success_count = 0
                for i, record in enumerate(parsed_data):
                    if isinstance(record, dict):
                        if await _process_single_wifi_record(record, message):
                            success_count += 1
                    else:
                        logger.warning(f"–ó–∞–ø–∏—Å—å #{i} –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {type(record)}")

                await message.answer(
                    f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {success_count}/{len(parsed_data)} –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ñ–∞–π–ª–∞.",
                    reply_markup=get_main_keyboard()
                )
        except Exception as e:
            logger.exception("Error processing multiple records")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {e}", reply_markup=get_main_keyboard())

    elif isinstance(parsed_data, dict):
        # –û–¥–∏–Ω–æ—á–Ω–∞—è –∑–∞–ø–∏—Å—å - –ø—Ä–æ–±—É–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ä–∞–∑—É
        success = await _process_single_wifi_record(parsed_data, message)
        if success:
            await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É!", reply_markup=get_main_keyboard())
    else:
        await message.answer("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç JSON. –û–∂–∏–¥–∞–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç –∏–ª–∏ –º–∞—Å—Å–∏–≤.", reply_markup=get_main_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot_router.message(Command("start"))
async def cmd_start(message: types.Message):
    welcome_text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WiFi Data Bot! üåê\n"
        "–Ø –ø–æ–º–æ–≥–∞—é —Å–æ–±–∏—Ä–∞—Ç—å –∏ —Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ WiFi-—Å–µ—Ç—è—Ö.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–º –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ, —Ç–∞–∫ –∏ JSON-—Ñ–∞–π–ª–∞–º–∏.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º:"
    )
    await message.answer(welcome_text, reply_markup=get_main_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–¢–∞–±–ª–∏—Ü–∞"
@bot_router.callback_query(F.data == "show_table")
async def show_table(callback: types.CallbackQuery) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–µ–∫—Å—Ç–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Å–æ –≤—Å–µ–º–∏ –∑–∞–ø–∏—Å—è–º–∏."""
    try:
        records = controller.db.read_all()
    except Exception as exc:
        logger.exception("Failed to read records from DB")
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {exc}")
        await callback.answer()
        return

    if not records:
        await callback.message.answer("–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ '–ù–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ'.")
        await callback.answer()
        return

    table_text = _format_records_table(records)
    await callback.message.answer(table_text, reply_markup=get_main_keyboard())
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ"
@bot_router.callback_query(F.data == "new_entry")
async def start_new_entry(callback: types.CallbackQuery) -> None:
    """–ü—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏—Å–ª–∞—Ç—å JSON —Å –¥–∞–Ω–Ω—ã–º–∏ –æ WiFi-—Å–µ—Ç–∏."""
    example = (
        '{"bssid": "00:11:22:33:44:55", "frequency": 2412, "rssi": -50, '
        '"ssid": "MyWiFi", "timestamp": 1698115200, "channel_bandwidth": "20MHz", '
        '"capabilities": "WPA2-PSK"}'
    )
    await callback.message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ WiFi-—Å–µ—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ JSON-—Ñ–∞–π–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n" + example
    )

    try:
        await callback.message.bot.set_chat_menu_button(
            chat_id=callback.message.chat.id,
            menu_button=types.MenuButtonCommands(),
        )
    except Exception:
        logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å chat menu button", exc_info=True)

    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ JSON-—Ñ–∞–π–ª–æ–≤
@bot_router.message(F.document)
async def handle_json_file(message: types.Message) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ JSON-—Ñ–∞–π–ª—ã."""
    if not message.document:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ JSON —Ñ–∞–π–ª
    if not message.document.file_name.endswith('.json'):
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.", reply_markup=get_main_keyboard())
        return

    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await message.bot.get_file(message.document.file_id)
        file_content = await message.bot.download_file(file.file_path)
        content_text = file_content.read().decode('utf-8')

        await message.answer("üì• –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω, –Ω–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        await _process_json_file_content(content_text, message)

    except Exception as e:
        logger.exception("Error processing JSON file")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}", reply_markup=get_main_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
@bot_router.message()
async def process_new_entry(message: types.Message) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ JSON-–ø—ç–π–ª–æ–∞–¥."""
    payload_text = message.text or ""

    try:
        data = controller.parse_json(payload_text)
    except ValueError as ve:
        logger.debug("Invalid JSON received from user", exc_info=True)
        await message.answer(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON: {ve}", reply_markup=get_main_keyboard())
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏
    success = await _process_single_wifi_record(data, message)
    if success:
        await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É!", reply_markup=get_main_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"
@bot_router.callback_query(F.data == "instructions")
async def show_instructions(callback: types.CallbackQuery) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    instructions = textwrap.dedent(
        """
        üìö *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é WiFi Data Bot*

        –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Å–±–æ—Ä–∞ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ WiFi-—Å–µ—Ç—è—Ö.
        –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–µ—Ç—è—Ö, –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ –∏ –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ.

        *–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞:*
        - *–¢–∞–±–ª–∏—Ü–∞*: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ WiFi-—Å–µ—Ç—è—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ç–∞–±–ª–∏—Ü—ã.
        - *–ù–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ*: –ü–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é WiFi-—Å–µ—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏–≤ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
        - *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è*: –í—ã–≤–æ–¥–∏—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.

        *–°–ø–æ—Å–æ–±—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:*
        1. *–¢–µ–∫—Å—Ç–æ–≤—ã–π JSON*: –û—Ç–ø—Ä–∞–≤—å—Ç–µ JSON-—Å—Ç—Ä–æ–∫—É –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        2. *JSON-—Ñ–∞–π–ª*: –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .json

        *–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö:*
        - –û–¥–∏–Ω–æ—á–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        - –ú–∞—Å—Å–∏–≤—ã –∑–∞–ø–∏—Å–µ–π –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ data_processor –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏

        *–§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö:*
        ```json
        {
            "bssid": "00:11:22:33:44:55",
            "frequency": 2412,
            "rssi": -50,
            "ssid": "MyWiFi",
            "timestamp": 1698115200,
            "channel_bandwidth": "20MHz",
            "capabilities": "WPA2-PSK"
        }
        ```

        *–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:* –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—è –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å - –±–æ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–∞–∫–∏–µ —Å–ª—É—á–∞–∏.

        *–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ:*
        - *SSID*: –ò–º—è WiFi-—Å–µ—Ç–∏.
        - *BSSID*: MAC-–∞–¥—Ä–µ—Å —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞.
        - *–ß–∞—Å—Ç–æ—Ç–∞*: –ß–∞—Å—Ç–æ—Ç–∞ –≤ –ú–ì—Ü.
        - *RSSI*: –£—Ä–æ–≤–µ–Ω—å —Å–∏–≥–Ω–∞–ª–∞ –≤ –¥–ë–º.
        - *–ö–∞–Ω–∞–ª*: –®–∏—Ä–∏–Ω–∞ –∫–∞–Ω–∞–ª–∞.
        - *–í—Ä–µ–º—è*: –í—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è (Unix timestamp).
        - *–ö–∞–ø–∞–±–∏–ª–∏—Ç–∏*: –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã.

        –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –æ—à–∏–±–∫–∏, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç JSON –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.
        """
    )

    await callback.message.answer(instructions, parse_mode="Markdown", reply_markup=get_main_keyboard())
    await callback.answer()
