import json
import textwrap
from typing import Any, Dict, List, Optional
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from loguru import logger

from controler import Controller


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ loguru –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
logger.add(
    sink=lambda msg: print(msg, end=""),  # –í—ã–≤–æ–¥ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
    format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>",
    level="DEBUG",
    colorize=True,
)

# –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–≤–æ–¥ –≤ —Ñ–∞–π–ª (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
logger.add(
    "bot.log",
    rotation="10 MB",
    retention="10 days",
    level="DEBUG",
    format="{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {name}:{function}:{line} - {message}"
)

bot_router = Router()
controller = Controller()


def _truncate(value: Optional[Any], length: int) -> str:
    if value is None:
        return ""
    s = str(value)
    return s if len(s) <= length else s[: max(0, length - 1)] + "‚Ä¶"


def get_main_keyboard() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –¢–∞–±–ª–∏—Ü–∞", callback_data="action:show_table"),
            InlineKeyboardButton(text="‚ûï –ù–æ–≤–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data="action:new_entry"),
        ],
        [InlineKeyboardButton(text="üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="action:instructions")]
    ])
    return keyboard


def _format_records_table(records: List[Dict[str, Any]]) -> str:
    if not records:
        return "(–Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π)"
    lines = ["BSSID | SSID | RSSI | FREQ | TIMESTAMP"]
    for r in records:
        lines.append(
            f"{_truncate(r.get('bssid'),17)} | {_truncate(r.get('ssid'),20)} | {_truncate(r.get('rssi'),4)} | {_truncate(r.get('frequency'),5)} | {_truncate(r.get('timestamp'),10)}"
        )
    return "\n".join(lines)


@bot_router.message(Command(commands=["start"]))
async def cmd_start(message: types.Message) -> None:
    logger.info(f"User {message.from_user.id} started the bot")
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–±–æ—Ä–∞ WiFi-–¥–∞–Ω–Ω—ã—Ö. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=get_main_keyboard(),
    )


@bot_router.callback_query(F.data == "action:show_table")
async def show_table(callback: types.CallbackQuery) -> None:
    logger.debug("Callback show_table received: {}", callback.data)
    try:
        records = controller.get_all_networks()
        logger.info(f"Retrieved {len(records)} records from database")
        text = _format_records_table(records)
        await callback.message.answer(f"üìä –¢–∞–±–ª–∏—Ü–∞ –∑–∞–ø–∏—Å–µ–π:\n{text}")
    except Exception as e:
        logger.error("Error showing table: {}", e)
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã")
    await callback.answer()


@bot_router.callback_query(F.data == "action:instructions")
async def show_instructions(callback: types.CallbackQuery) -> None:
    logger.debug("Callback instructions received: {}", callback.data)
    instructions = textwrap.dedent(
        """
        üìö *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é WiFi Data Bot*

        –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ WiFi —Å–µ—Ç—è—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.

        –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
        - –¢–∞–±–ª–∏—Ü–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏
        - –ù–æ–≤–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ JSON –∫–∞–∫ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª–æ–º .json

        –ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏ (JSON):
        {
            "bssid": "00:11:22:33:44:55",
            "frequency": 2412,
            "rssi": -50,
            "ssid": "MyWiFi",
            "timestamp": 1698115200,
            "channel_bandwidth": "20",
            "capabilities": "WPA2-PSK"
        }
        """
    ).strip()

    await callback.message.answer(
        instructions,
        parse_mode="Markdown",
        reply_markup=get_main_keyboard()
    )
<<<<<<< HEAD
    await callback.message.answer(instructions, parse_mode="Markdown")
    await callback.answer()


@bot_router.callback_query(F.data == "action:new_entry")
async def new_entry_prompt(callback: types.CallbackQuery) -> None:
    logger.debug("Callback new_entry received: {}", callback.data)
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ JSON (–∫–∞–∫ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª .json) —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–µ—Ç–∏.")
    await callback.answer()


@bot_router.message()
async def handle_text_or_file(message: types.Message) -> None:
    logger.info(f"Processing message from user {message.from_user.id}")
    
    # Handle json text messages or json files attached
    # If there is a document with .json extension ‚Äì try to read
    payload: Optional[bytes] = None
    if message.document and message.document.file_name.lower().endswith('.json'):
        logger.debug("JSON file received: {}", message.document.file_name)
        file = await message.document.download()
        payload = await file.read()
    elif message.text:
        logger.debug("Text message received")
        payload = message.text.encode('utf-8')
    else:
        logger.warning("Unsupported message type received")
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ JSON —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ .json —Ñ–∞–π–ª.")
        return

    try:
        data = controller.parse_json(payload)
        logger.debug("JSON parsed successfully")
    except ValueError as e:
        logger.error("JSON parsing error: {}", e)
        await message.answer(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        return

    # If it's a list, process items one by one
    if isinstance(data, list):
        logger.info(f"Processing list with {len(data)} items")
        ok_count = 0
        for i, item in enumerate(data):
            try:
                nw = controller.build_network(item)
                if controller.save_network(nw):
                    ok_count += 1
                    logger.debug(f"Item {i+1} saved successfully")
                else:
                    logger.warning(f"Failed to save item {i+1}")
            except Exception as e:
                logger.error("Error saving item {} from list: {}", i+1, e)
        
        logger.info(f"Saved {ok_count}/{len(data)} records successfully")
        await message.answer(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {ok_count}/{len(data)} –∑–∞–ø–∏—Å–µ–π.")
        await message.answer("–ì–æ—Ç–æ–≤–æ!", reply_markup=get_main_keyboard())
        return

    # single record
    logger.debug("Processing single record")
    try:
        nw = controller.build_network(data)
        if controller.save_network(nw):
            logger.info("Single record saved successfully")
            await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=get_main_keyboard())
        else:
            logger.warning("Failed to save single record")
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å (–≤–æ–∑–º–æ–∂–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç BSSID –∏–ª–∏ –æ—à–∏–±–æ—á–Ω—ã–µ –ø–æ–ª—è).")
    except Exception as e:
        logger.error("Error processing single record: {}", e)
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø–∏—Å–∏: {e}")
=======
    await callback.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
>>>>>>> dc915c2f680653ea37a87ea047816d5b4fab2de7
